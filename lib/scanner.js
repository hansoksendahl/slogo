// Slogo
// =====

// Slogo is generated by the [Jison](http://github.com/zaach/jison) javascript library
// using this grammar file.  Jison draws its inspiration from [Bison](http://www.gnu.org/software/bison)
// a parser generator for C and C++.  Jison can recognize [LALR(1)](http://en.wikipedia.org/wiki/LR_grammar)
// [LR(0)](http://en.wikipedia.org/wiki/LR_grammar), [SLR(1)](http://en.wikipedia.org/wiki/LR_grammar),
// and [LR(1)](http://en.wikipedia.org/wiki/LR_grammar)
// grammars and includes support for generating [LL(1)](http://en.wikipedia.org/wiki/LL_parser) parse tables.

var jison = require('jison');

// We'll be working on creating a JSON data structure to feed into Jison.
// This data will contain all of the information that Jison needs to generate a
// parser from our input sgrammar.

// This is a utility function to assist in setting rules.
//
// Usage
//
// `rules(/b/, 'RANDOM') # returns [['/b/', 'return "RANDOM";']]`
var rules = function() {
  var rules = [];
  for (var i = 0; i < arguments.length; i = i + 2) {
    var
      regex = arguments[i].toString().slice(1, -1),
      token = /^\/[\/\*]/.test(arguments[i+1])
        ? ''
        : 'return "'+arguments[i+1]+'";';
    rules.push([regex, token]);
  };
  return rules;
};

// This is a utility function to assist in setting operators.
//
// Usage
//
// `operators('l + -'); // returns [['left', '+', '-' ]];`
var operators = function() {
  var operators = [];
  for (var i = 0; i < arguments.length; i++) {
    var match = /^(l|r)\s*(\S[\s\S]*)/.exec(arguments[i]);
    operators[i] = [match[1] == 'l' ? 'left' : 'right'];
    operators[i] = operators[i].concat(match[2].split(/\s+/));
  };
  return operators;
};



var grammar = {
  'comment': 'Slogo (version 0.0.1)',
  'author': 'Hans Oksendahl',
  'lex': {
    // __Macros__ are variables that we can use in our rules.  We'll begin by
    // first defining the kinds of strings we like for variable names.
    //
    'macros': {
      // ### String Literals
      'alph': '[a-zA-Z][a-zA-Z0-9-]*',
      // ### Math constants and functions
      // The ([MDN Documentation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math))
      // for Javascript's Math object is worth looking up because we retain many
      // of Javascript's math constants and functions.
      //
      // In regards to math the syntax of Slogo differs from Javascript in a
      // number of ways:
      //
      // 1. In Slogo every math constant and function is directly available in
      //   the main namespace.
      //
      //   `PI == 3.141592653589793`
      //
      //   `max 2, 5, 3 == 5`
      //
      // 2. Exponents have their own operator, the `^` operator
      //
      //   `3 ^ 2 == 9`
      //
      // 3. Factorials have their own operator, the `!` operator
      //
      //   `4! == 4 * 3 * 2 * 1`
      //
      // 4. The percent sign is used for percentages.
      //
      //   `50% == 0.50`
      //
      // 5. The modulus operator is still an operator but it has a longer name
      //
      //   `3 mod 2 == 1`
      'int':  '-?(?:[0-9]|[1-9][0-9]+)',
      'exp':  '(?:[eE][-+]?[0-9]+)',
      'frac': '(?:\\.[0-9]+)',
      'mCon': 'E|LN2|LN10|LOG2E|LOG10E|PI|SQRT1_2|SQRT2',
      'mTri': 'acos|asin|atan|atan2|cos|sin|tan',
      'mLog': 'exp|log',
      'mGen': 'abs|ceiling|floor|max|pow|random|round|sqrt'
    },
    // ### Rules
    // Regular expression rules define the valid string patterns for our grammar.
    // We assign most of our tokens here.
    //
    // We use some of the macros listed above to simplify this process.
    'rules': rules(
      /\s+/,                      '/* skip white space */',
      /{int}{frac}?{exp}?/,       'NUMBER',
      /\+/,                       'PLUS',
      /-/,                        'MINUS',
      /\*/,                       'TIMES',
      /\//,                       'DIVIDE',
      /\{/,                       '{',
      /\}/,                       '}',
      /\[/,                       '[',
      /\]/,                       ']',
      /\(/,                       '(',
      /\)/,                       ')',
      /,/,                        ',',
      /^/,                        '^',
      /!/,                        '!',
      /%/,                        '%',
      /mod/,                      'MODULUS',
      /(?:{mCon})/,               'MATHCONSTANT',
      /(?:{mTri}|{mLog}|{mGen})/, 'MATHFUNCTION',
      /\$/,                       'ENDOFFILE'
    )
  },
  // ## Start Symbol
  'start': 'PROGRAM',
  // ## Operators
  // Their order is important as it sets the precedence for the operational
  // terms.
  "operators": operators(
    'l + -',
    'l * /',
    'l ^',
    'l mod',
    'r !',
    'r %'
  ),
  'bnf': {
    'PROGRAM': [
      ['EXPRESSION ENDOFFILE', 'return $1']
    ],
    'EXPRESSION': [
      ['EXPRESSION PLUS EXPRESSION',    '$$ = $1 + $3;'],
      ['EXPRESSION MINUS EXPRESSION',   '$$ = $1 - $3;'],
      ['EXPRESSION TIMES EXPRESSION',   '$$ = $1 * $3;'],
      ['EXPRESSION DIVIDE EXPRESSION',  '$$ = $1 / $3;'],
      ['EXPRESSION MODULUS EXPRESSION', '$$ = $1 % $3'],
      ['MATHCONSTANT',                  '$$ = Math[$1];'],
      ['NUMBER',                        '$$ = Number(yytext)']
    ]
  }
};

var parser = new jison.Parser(grammar);
parser.generate();
